import { Injectable, Logger } from '@nestjs/common';
import { GenerationContext } from '../interfaces/generator.interface';

@Injectable()
export class FlutterPromptService {
  private readonly logger = new Logger(FlutterPromptService.name);

  /**
   * Restricciones y reglas de c√≥digo Flutter para evitar errores
   */
  private readonly FLUTTER_CODE_RESTRICTIONS = `
RESTRICCIONES OBLIGATORIAS PARA C√ìDIGO FLUTTER:

üö´ ERRORES PROHIBIDOS:
- NO usar Theme.of(context).colorSchemeSecondary (no existe)
- NO declarar variables duplicadas como 'colorScheme'
- NO importar packages no est√°ndar como riverpod, provider, bloc sin especificaci√≥n
- NO usar getters que no existen en ThemeData
- NO crear variables no utilizadas

‚úÖ REGLAS DE C√ìDIGO LIMPIO:
- Usar SOLO Theme.of(context).colorScheme.primary, secondary, etc.
- Declarar variables √∫nicas sin duplicados
- Usar SOLO material.dart, widgets est√°ndar de Flutter
- Validar que todos los getters existan en la API de Flutter
- Eliminar variables no usadas autom√°ticamente

üì± ESTRUCTURA OBLIGATORIA:
- Material Design 3 est√°ndar
- GoRouter para navegaci√≥n (sin packages adicionales)
- Widgets nativos de Flutter √∫nicamente
- Variables con nombres √∫nicos y descriptivos

üé® THEME CORRECTO:
- colorScheme.primary (‚úÖ)
- colorScheme.secondary (‚úÖ) 
- colorScheme.surface (‚úÖ)
- colorScheme.onSurface (‚úÖ)
- NO colorSchemeSecondary (‚ùå)
- NO colorScheme duplicado (‚ùå)

üíæ DEPENDENCIAS PERMITIDAS:
SOLO estas dependencias est√°ndar:
dependencies:
  flutter:
    sdk: flutter
  go_router: ^14.2.0
  
NO incluir: riverpod, provider, bloc, dio, http sin especificaci√≥n expl√≠cita.
  `;

  /**
   * Genera prompt optimizado para crear aplicaci√≥n Flutter con restricciones
   */
  generatePromptForFlutterApp(input: {
    appName: string;
    description: string;
    screens?: string[];
    domain?: string;
  }): string {
    this.logger.debug(`üéØ Generando prompt Flutter con restricciones para: ${input.appName}`);

    const basePrompt = `
${this.FLUTTER_CODE_RESTRICTIONS}

GENERAR APLICACI√ìN FLUTTER COMPLETA:

Nombre: ${input.appName}
Descripci√≥n: ${input.description}
Dominio: ${input.domain || 'General'}

PANTALLAS REQUERIDAS:
${input.screens?.map((screen, index) => `${index + 1}. ${screen}Screen`).join('\n') || '- HomeScreen\n- ProfileScreen\n- SettingsScreen'}

ESTRUCTURA DE ARCHIVOS OBLIGATORIA:
lib/
‚îú‚îÄ‚îÄ main.dart (MaterialApp con GoRouter)
‚îú‚îÄ‚îÄ core/
‚îÇ   ‚îú‚îÄ‚îÄ router/app_router.dart (GoRouter config)
‚îÇ   ‚îî‚îÄ‚îÄ themes/app_theme.dart (Material 3 theme)
‚îú‚îÄ‚îÄ features/
‚îÇ   ‚îú‚îÄ‚îÄ [feature]/screens/[screen]_screen.dart
‚îÇ   ‚îî‚îÄ‚îÄ [feature]/widgets/[widget].dart
‚îî‚îÄ‚îÄ shared/widgets/common_widgets.dart

VALIDACIONES T√âCNICAS:
‚úÖ Verificar que NO existe colorSchemeSecondary
‚úÖ Verificar que NO hay variables duplicadas
‚úÖ Verificar que SOLO se usan dependencias permitidas
‚úÖ Verificar que todas las p√°ginas tienen contenido espec√≠fico
‚úÖ Verificar sintaxis correcta de Material Design 3

GENERAR:
1. Estructura completa de archivos
2. Navegaci√≥n funcional entre pantallas
3. Tema Material Design 3 v√°lido
4. Widgets reutilizables sin errores
5. Router con todas las rutas configuradas

CADA PANTALLA DEBE:
- Tener contenido espec√≠fico y funcional
- Usar AppBar con t√≠tulo descriptivo
- Incluir navegaci√≥n apropiada
- Mostrar widgets relevantes al prop√≥sito
- Seguir patrones de Material Design 3
    `;

    return basePrompt.trim();
  }

  /**
   * Genera prompt espec√≠fico para procesar mockups XML
   */
  generatePromptFromXML(xmlContent: string, appName: string): string {
    this.logger.debug(`üì± Procesando XML mockup para app: ${appName}`);

    // Analizar XML para extraer componentes
    const extractedComponents = this.extractComponentsFromXML(xmlContent);
    
    const xmlPrompt = `
${this.FLUTTER_CODE_RESTRICTIONS}

ANALIZAR MOCKUP XML Y GENERAR FLUTTER APP:

Aplicaci√≥n: ${appName}
XML Mockup Analizado:
${xmlContent}

COMPONENTES DETECTADOS:
${extractedComponents.map(comp => `- ${comp.type}: ${comp.text || comp.description}`).join('\n')}

PANTALLAS A GENERAR:
${this.generateScreensFromComponents(extractedComponents)}

CONVERSI√ìN XML ‚Üí FLUTTER:
1. Analizar cada elemento del mockup
2. Convertir a widgets Flutter equivalentes
3. Mantener dise√±o y funcionalidad del mockup
4. Crear navegaci√≥n entre pantallas detectadas
5. Implementar formularios y componentes interactivos

MAPEO DE COMPONENTES:
- Botones XML ‚Üí ElevatedButton/OutlinedButton
- Campos de texto ‚Üí TextFormField
- Listas ‚Üí ListView/Column
- Tarjetas ‚Üí Card widgets
- Navegaci√≥n ‚Üí AppBar + Drawer/BottomNavigationBar

RESULTADO ESPERADO:
- App Flutter funcional basada en el mockup
- Navegaci√≥n completa entre pantallas
- Formularios interactivos
- Dise√±o fiel al mockup original
- C√≥digo sin errores de compilaci√≥n

IMPORTANTE: Cada pantalla debe tener contenido real, no placeholders.
    `;

    return xmlPrompt.trim();
  }

  /**
   * Extrae componentes del XML mockup
   */
  private extractComponentsFromXML(xmlContent: string): any[] {
    const components: any[] = [];
    
    try {
      // Buscar elementos comunes en el XML
      const textMatches = xmlContent.match(/value="([^"]+)"/g) || [];
      const styleMatches = xmlContent.match(/style="([^"]+)"/g) || [];
      
      textMatches.forEach(match => {
        const text = match.replace('value="', '').replace('"', '');
        if (text.length > 1 && !text.includes('mxgraph')) {
          components.push({
            type: this.determineComponentType(text),
            text: text,
            description: `Componente con texto: ${text}`
          });
        }
      });

      // Detectar tipos de componentes por estilo
      if (xmlContent.includes('fillColor')) {
        components.push({
          type: 'form',
          description: 'Formulario detectado'
        });
      }

      if (xmlContent.includes('button') || xmlContent.includes('rounded')) {
        components.push({
          type: 'button',
          description: 'Botones detectados'
        });
      }

      if (xmlContent.includes('strokeColor')) {
        components.push({
          type: 'input',
          description: 'Campos de entrada detectados'
        });
      }

    } catch (error) {
      this.logger.error('Error parsing XML mockup:', error);
      // Fallback: generar componentes b√°sicos
      components.push(
        { type: 'screen', description: 'Pantalla principal' },
        { type: 'form', description: 'Formulario' },
        { type: 'button', description: 'Botones de acci√≥n' }
      );
    }

    return components.length > 0 ? components : [
      { type: 'home', description: 'Pantalla de inicio' },
      { type: 'detail', description: 'Pantalla de detalles' },
      { type: 'settings', description: 'Configuraciones' }
    ];
  }

  /**
   * Determina el tipo de componente basado en el texto
   */
  private determineComponentType(text: string): string {
    const lowerText = text.toLowerCase();
    
    if (lowerText.includes('dashboard') || lowerText.includes('home')) {
      return 'home';
    }
    if (lowerText.includes('create') || lowerText.includes('add')) {
      return 'create';
    }
    if (lowerText.includes('project') || lowerText.includes('item')) {
      return 'project';
    }
    if (lowerText.includes('publish') || lowerText.includes('save')) {
      return 'button';
    }
    if (lowerText.includes('permission') || lowerText.includes('setting')) {
      return 'settings';
    }
    if (lowerText.includes('description') || lowerText.includes('text')) {
      return 'input';
    }
    
    return 'component';
  }

  /**
   * Genera lista de pantallas basada en componentes detectados
   */
  private generateScreensFromComponents(components: any[]): string {
    const screens = new Set<string>();
    
    components.forEach(comp => {
      switch (comp.type) {
        case 'home':
          screens.add('HomeScreen - Dashboard principal');
          break;
        case 'create':
          screens.add('CreateProjectScreen - Crear nuevo proyecto');
          break;
        case 'project':
          screens.add('ProjectDetailScreen - Detalles del proyecto');
          break;
        case 'settings':
          screens.add('SettingsScreen - Configuraciones y permisos');
          break;
        case 'form':
          screens.add('FormScreen - Formulario de entrada');
          break;
        default:
          screens.add('DetailScreen - Pantalla de detalles');
      }
    });

    // Asegurar m√≠nimo de pantallas
    if (screens.size < 3) {
      screens.add('HomeScreen - Pantalla principal');
      screens.add('DetailScreen - Pantalla de detalles');
      screens.add('ProfileScreen - Perfil de usuario');
    }

    return Array.from(screens).join('\n');
  }

  /**
   * Valida que el prompt generado cumple las restricciones
   */
  validateFlutterPrompt(prompt: string): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];
    
    // Verificar restricciones
    if (prompt.includes('colorSchemeSecondary')) {
      errors.push('Uso prohibido de colorSchemeSecondary');
    }
    
    if (prompt.includes('riverpod') && !prompt.includes('PERMITIR riverpod')) {
      errors.push('Dependencia riverpod no permitida sin especificaci√≥n');
    }
    
    if (!prompt.includes('Material Design 3')) {
      errors.push('Debe especificar Material Design 3');
    }

    if (!prompt.includes('GoRouter')) {
      errors.push('Debe usar GoRouter para navegaci√≥n');
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }

  createSystemPrompt(): string {
    return `Eres un experto desarrollador Flutter que genera aplicaciones modernas desde mockups XML de Draw.io.

**FORMATO DE RESPUESTA OBLIGATORIO:**
DEBES usar EXACTAMENTE este formato para cada archivo generado:

[FILE: ruta/del/archivo.dart]
\`\`\`dart
// Tu c√≥digo aqu√≠
\`\`\`

[FILE: pubspec.yaml]
\`\`\`yaml
# Tu c√≥digo aqu√≠
\`\`\`

EJEMPLO CORRECTO:
[FILE: lib/main.dart]
\`\`\`dart
import 'package:flutter/material.dart';
import 'app.dart';

void main() {
  runApp(const MyApp());
}
\`\`\`

[FILE: pubspec.yaml]
\`\`\`yaml
name: example_app
description: A Flutter application
\`\`\`

‚ùå NO USES: separadores como ‚ïê‚ïê‚ïê, ‚îÄ‚îÄ‚îÄ, o cualquier otro formato
‚ùå NO USES: markdown headers como # Archivo
‚ùå NO USES: texto explicativo entre archivos
‚úÖ USA SOLO: [FILE: ruta] seguido de \`\`\`tipo

ARQUITECTURA OBLIGATORIA:
- Flutter puro con StatefulWidget para estado (NO usar Riverpod ni Provider)
- GoRouter para navegaci√≥n (go_router: ^13.0.0)
- Material Design 3 con useMaterial3: true
- Estructura modular: features/[domain]/screens/

PROHIBICIONES ABSOLUTAS:
‚ùå NUNCA uses flutter_riverpod
‚ùå NUNCA uses provider package
‚ùå NUNCA uses ChangeNotifier
‚ùå NUNCA uses Consumer widgets
‚ùå NUNCA uses ProviderScope
‚ùå NUNCA uses StateNotifier
‚ùå NUNCA uses ref.watch() o ref.read()
‚ùå NUNCA importes 'package:flutter_riverpod/flutter_riverpod.dart'
‚ùå NUNCA importes 'package:provider/provider.dart'

SOLO USA:
‚úÖ StatefulWidget con setState() para estado
‚úÖ Variables de instancia simples (String, bool, int)
‚úÖ TextEditingController para formularios
‚úÖ GlobalKey<FormState> para validaci√≥n

APPTHEME CORRECTO (SIN REFERENCIAS CIRCULARES):
\`\`\`dart
class AppTheme {
  // ‚úÖ CORRECTO: Definir colores como constantes primero
  static const Color primaryColor = Color(0xFF2196F3);
  static const Color secondaryColor = Color(0xFF03DAC6);
  
  static ThemeData get lightTheme {
    return ThemeData(
      useMaterial3: true,
      colorScheme: ColorScheme.fromSeed(
        seedColor: primaryColor, // ‚úÖ Usar la constante, NO _colorScheme.primary
        brightness: Brightness.light,
      ),
      // Resto de la configuraci√≥n...
    );
  }
}
\`\`\`

‚ùå INCORRECTO (CAUSA STACK OVERFLOW):
\`\`\`dart
class AppTheme {
  static final ColorScheme _colorScheme = ColorScheme.fromSeed(
    seedColor: _colorScheme.primary, // ‚ùå REFERENCIA CIRCULAR
    brightness: Brightness.light,
  );
}
\`\`\`

DETECCI√ìN AUTOM√ÅTICA DE PANTALLAS:
- Si el XML tiene m√∫ltiples elementos 'android.phone2' ‚Üí CREAR NAVIGATION DRAWER AUTOM√ÅTICAMENTE
- RegisterScreen para textos "Register", "Your name", "Password", "Guardar"
- CreateProjectScreen para textos "Create a project", "Name", "Key", "Description", "Publish"
- SIEMPRE generar AppDrawer cuando hay 2+ pantallas detectadas

REGLAS CR√çTICAS PARA EVITAR ERRORES:
1. **AppRouter SINGLETON**: SIEMPRE usar AppRouter().router NO AppRouter.router
2. **Import paths relativos**: '../../../shared/widgets/app_drawer.dart' NO package imports
3. **Material Design 3**: colorScheme.primary NO primaryColor
4. **GoRouter moderno**: routerConfig: AppRouter().router NO routerDelegate
5. **Constructor moderno**: const Widget({super.key}) NO {Key? key}
6. **IMPORTS OBLIGATORIOS** en screens que usan AppDrawer:
   import '../../../shared/widgets/app_drawer.dart';
7. **RADIO BUTTONS**: Usar AppRadioGroup del shared/widgets para selecciones m√∫ltiples

EJEMPLO CORRECTO AppRouter:
\`\`\`dart
// [FILE: lib/app.dart]
final _appRouter = AppRouter();

MaterialApp.router(
  routerConfig: _appRouter.router, // ‚úÖ CORRECTO
  // NO: routerConfig: AppRouter.router, // ‚ùå ERROR
)
\`\`\`

SCAFFOLD CON DRAWER AUTOM√ÅTICO:
\`\`\`dart
// IMPORTS OBLIGATORIOS:
import '../../../shared/widgets/app_drawer.dart';

Scaffold(
  backgroundColor: Theme.of(context).colorScheme.background,
  appBar: AppBar(
    title: Text('Title'),
    backgroundColor: Theme.of(context).colorScheme.surface,
    foregroundColor: Theme.of(context).colorScheme.onSurface,
    elevation: 0,
    centerTitle: true,
  ),
  drawer: const AppDrawer(), // OBLIGATORIO si m√∫ltiples pantallas
  body: SafeArea(
    child: Padding(
      padding: EdgeInsets.all(16),
      child: // Content
    ),
  ),
)
\`\`\`

RADIO BUTTONS CON AppRadioGroup:
\`\`\`dart
// IMPORTS OBLIGATORIOS:
import '../../../shared/widgets/app_widgets.dart';

// ESTADO REQUERIDO EN WIDGET:
String? selectedAccess = 'read_write';

// WIDGET COMPLETO:
AppRadioGroup<String>(
  title: 'User access',
  options: [
    RadioOption(title: 'Read and write', value: 'read_write'),
    RadioOption(title: 'Read only', value: 'read_only'),
    RadioOption(title: 'None', value: 'none'),
  ],
  groupValue: selectedAccess,
  onChanged: (value) => setState(() => selectedAccess = value),
)

// EJEMPLO COMPLETO EN CreateProjectScreen:
Column(
  crossAxisAlignment: CrossAxisAlignment.start,
  children: [
    AppTitle(text: 'Project permissions'),
    SizedBox(height: 16),
    AppRadioGroup<String>(
      title: 'User access',
      options: [
        RadioOption(title: 'Read and write', value: 'read_write'),
        RadioOption(title: 'Read only', value: 'read_only'),
        RadioOption(title: 'None', value: 'none'),
      ],
      groupValue: selectedAccess,
      onChanged: (value) => setState(() => selectedAccess = value),
    ),
  ],
)
\`\`\`

NAVIGATION DRAWER CON GoRouter:
\`\`\`dart
// IMPORTS OBLIGATORIOS PARA NAVEGACI√ìN:
import 'package:go_router/go_router.dart';

// AppDrawer DEBE USAR GoRouter (NO Navigator.pushNamed):
NavigationDrawer(
  backgroundColor: Theme.of(context).colorScheme.surface,
  children: [
    DrawerHeader(
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.primaryContainer,
      ),
      child: // Header content
    ),
    // ‚ùå INCORRECTO: Navigator.of(context).pushNamed('/')
    // ‚úÖ CORRECTO: context.go() o context.push()
    ListTile(
      leading: Icon(Icons.person_add),
      title: Text('Register'),
      onTap: () => context.go('/'), // Pantalla principal
    ),
    ListTile(
      leading: Icon(Icons.create),
      title: Text('Create Project'),
      onTap: () => context.push('/create-project'), // Nueva pantalla
    ),
  ],
)

// DIFERENCIAS EN NAVEGACI√ìN:
// context.go('/route')   - Reemplaza la pila de navegaci√≥n
// context.push('/route') - A√±ade a la pila (permite regresar)
\`\`\`

FORMULARIOS REACTIVOS:
- TextFormField con borderRadius: 12
- GlobalKey<FormState> para validaci√≥n
- Estados con StatefulWidget y setState()
- Loading states en botones con variables bool

ARCHIVOS OBLIGATORIOS:
[FILE: lib/main.dart] - runApp(const MyApp())
[FILE: lib/app.dart] - MaterialApp.router con AppRouter().router
[FILE: lib/core/router/app_router.dart] - Singleton pattern
[FILE: lib/core/themes/app_theme.dart] - Material Design 3
[FILE: lib/shared/widgets/app_drawer.dart] - Si m√∫ltiples pantallas
[FILE: lib/features/register/screens/register_screen.dart]
[FILE: lib/features/project/screens/create_project_screen.dart]
[FILE: pubspec.yaml] - Dependencies correctas

USAR FORMATO [FILE: ruta] para cada archivo generado`;
  }

  createUserPrompt(context: GenerationContext, screenDetection?: any): string {
    // Si HAY XML, usar flujo espec√≠fico para XML
    if (context.xml) {
      return this.createXmlBasedPrompt(context, screenDetection);
    }
    
    // Si NO hay XML, usar flujo espec√≠fico para prompts
    return this.createPromptBasedPrompt(context);
  }

  /**
   * Crea prompt optimizado para generaci√≥n desde XML (flujo original)
   */
  private createXmlBasedPrompt(context: GenerationContext, screenDetection?: any): string {
    const xml = context.xml || '';
    const appName = context.config?.package_name || 'MockupApp';
    
    // Contar pantallas en el XML
    const phoneCount = (xml.match(/shape=mxgraph\.android\.phone2/g) || []).length;
    
    return `GENERAR APLICACI√ìN FLUTTER COMPLETA DESDE XML MOCKUP

**FORMATO DE RESPUESTA OBLIGATORIO:**
Debes usar EXACTAMENTE este formato para cada archivo:

[FILE: ruta/del/archivo.dart]
\`\`\`dart
// c√≥digo aqu√≠
\`\`\`

[FILE: pubspec.yaml]
\`\`\`yaml
# c√≥digo aqu√≠
\`\`\`

‚ùå NO uses separadores como ‚ïê‚ïê‚ïê, ‚îÄ‚îÄ‚îÄ, o texto explicativo
‚úÖ USA SOLO: [FILE: ruta] seguido de \`\`\`tipo

APLICACI√ìN: ${appName}
TIPO: Flutter con Material Design 3

üîç **AN√ÅLISIS CR√çTICO DEL XML:**
El XML contiene ${phoneCount} PANTALLAS M√ìVILES (shape=mxgraph.android.phone2).
DEBES GENERAR UNA SCREEN DART PARA CADA PANTALLA DETECTADA.

üì± **PANTALLAS OBLIGATORIAS A GENERAR:**
${phoneCount > 0 ? Array.from({length: phoneCount}, (_, i) => `${i + 1}. lib/features/screen${i + 1}/screens/screen${i + 1}_screen.dart`).join('\n') : 'Detectar pantallas del XML'}

üö® **INSTRUCCIONES ESPEC√çFICAS PARA M√öLTIPLES PANTALLAS:**
- Si hay ${phoneCount} pantallas ‚Üí DEBES generar ${phoneCount} archivos _screen.dart
- Cada pantalla debe tener su propio directorio en features/
- INCLUIR Navigation Drawer autom√°ticamente para navegar entre pantallas
- Analizar el contenido espec√≠fico de cada pantalla en el XML

${this.analyzeXmlContent(xml, screenDetection)}

${this.formatScreenDetection(screenDetection)}

${this.createStructuredInstructions(xml, screenDetection)}

GENERAR PROYECTO FLUTTER COMPLETO:
- pubspec.yaml con dependencias correctas
- lib/main.dart como punto de entrada
- lib/app.dart con MaterialApp.router
- lib/core/router/app_router.dart con GoRouter configurado para ${phoneCount} rutas
- lib/core/themes/app_theme.dart con Material Design 3
- lib/shared/widgets/app_widgets.dart con componentes reutilizables
- lib/shared/widgets/app_drawer.dart (OBLIGATORIO para ${phoneCount} pantallas)
- **${phoneCount} PANTALLAS INDIVIDUALES** en lib/features/[nombre]/screens/

‚ö†Ô∏è **CR√çTICO**: Debes generar exactamente ${phoneCount} archivos _screen.dart, uno por cada elemento android.phone2 en el XML.

IMPORTANTE: Cada archivo debe usar el formato [FILE: ruta] exacto sin variaciones.

XML MOCKUP A ANALIZAR (${phoneCount} PANTALLAS):
${xml}`;
  }

  /**
   * Crea prompt optimizado para generaci√≥n desde descripci√≥n de texto (prompt enriquecido por IA)
   */
  private createPromptBasedPrompt(context: GenerationContext): string {
    const aiInterpretedPrompt = context.prompt || 'Aplicaci√≥n m√≥vil est√°ndar';

    return `GENERACI√ìN DE C√ìDIGO FLUTTER DESDE INTERPRETACI√ìN DE IA:

LA IA YA INTERPRET√ì Y ESPECIFIC√ì ESTO:
${aiInterpretedPrompt}

TU MISI√ìN: Convertir esta ESPECIFICACI√ìN T√âCNICA COMPLETA en c√≥digo Flutter funcional.

CONFIGURACI√ìN ADICIONAL:
${JSON.stringify(context.config || {}, null, 2)}

REQUERIMIENTOS CR√çTICOS - IMPLEMENTAR SEG√öN LA ESPECIFICACI√ìN IA:
1. **LEE CUIDADOSAMENTE** toda la especificaci√≥n t√©cnica de la IA
2. **GENERA TODAS** las pantallas que la IA especific√≥ en su an√°lisis
3. **IMPLEMENTA TODAS** las funcionalidades que la IA detall√≥
4. **RESPETA** la arquitectura que la IA defini√≥ para el proyecto
5. **USA ARQUITECTURA LIMPIA**: Flutter + GoRouter + Material Design 3
6. **NO USES ESTADOS COMPLEJOS**: NO usar Riverpod, Provider, ChangeNotifier, Consumer
7. **SOLO StatefulWidget**: Para estado usar setState() √∫nicamente
8. **IMPORTS CORRECTOS** en todos los archivos
9. **AppRouter().router** (NO AppRouter.router)

ARQUITECTURA T√âCNICA SEG√öN LA IA:
- Flutter puro con StatefulWidget para estado (NO usar Riverpod ni Provider)
- GoRouter para navegaci√≥n (go_router: ^13.0.0)
- Material Design 3 con useMaterial3: true
- Estructura modular seg√∫n lo que defini√≥ la IA
- TODAS las pantallas que la IA especific√≥ en su an√°lisis
- Navigation drawer o BottomNav seg√∫n lo que defini√≥ la IA
- Formularios y funcionalidades seg√∫n la especificaci√≥n de la IA
- Estados simples (loading, error, success) con setState() √∫nicamente

PROHIBICIONES ESTRICTAS:
‚ùå NO usar flutter_riverpod
‚ùå NO usar provider package
‚ùå NO usar ChangeNotifier
‚ùå NO usar Consumer widgets
‚ùå NO usar ProviderScope
‚ùå NO usar StateNotifier
‚ùå NO usar AsyncValue
‚ùå NO usar ref.watch() o ref.read()
‚ùå NO importar 'package:flutter_riverpod/flutter_riverpod.dart'
‚ùå NO importar 'package:provider/provider.dart'
‚ùå NO crear referencias circulares en AppTheme
‚ùå NO usar variables que se referencien a s√≠ mismas

IMPLEMENTACI√ìN ESPEC√çFICA REQUERIDA:
‚úÖ SOLO las pantallas espec√≠ficamente solicitadas
‚úÖ SOLO las funcionalidades espec√≠ficamente mencionadas
‚úÖ Navigation drawer SOLO si hay m√°s de 2 pantallas principales
‚úÖ Formularios b√°sicos apropiados para las pantallas solicitadas
‚úÖ Navegaci√≥n entre las pantallas solicitadas con GoRouter
‚úÖ Imports correctos y c√≥digo limpio
‚úÖ AppRouter().router (NO AppRouter.router)
‚úÖ StatefulWidget con setState() para TODOS los estados
‚úÖ Variables de instancia simples (String, bool, int) para datos
‚úÖ Formularios con GlobalKey<FormState> y TextEditingController

VALIDACI√ìN CR√çTICA:
- ¬øImplement√© TODAS las pantallas que la IA especific√≥ en su an√°lisis?
- ¬øRespet√© la arquitectura y estructura que defini√≥ la IA?
- ¬øLas funcionalidades corresponden a lo que analiz√≥ la IA?
- ¬øEl drawer/bottomNav sigue lo que especific√≥ la IA?
- ¬øNO us√© ning√∫n Provider, Riverpod o ChangeNotifier?
- ¬øTodas las pantallas usan StatefulWidget con setState()?
- ¬øNo hay imports de flutter_riverpod o provider?
- ¬øAppTheme NO tiene referencias circulares?
- ¬øLos colores est√°n definidos como constantes antes de usarse?
- ¬øColorScheme.fromSeed usa constantes, NO variables que se referencien a s√≠ mismas?

Genera EXACTAMENTE los archivos necesarios para implementar FIELMENTE la especificaci√≥n t√©cnica de la IA.`;
  }

  private analyzeXmlContent(xml: string, screenDetection?: any): string {
    try {
      const analysis: string[] = [];
      
      // USAR LAS NUEVAS SECCIONES DE PANTALLAS SI EST√ÅN DISPONIBLES
      if (screenDetection?.screenSections && screenDetection.screenSections.length > 0) {
        analysis.push(`üîç SECCIONES DE PANTALLAS DETECTADAS: ${screenDetection.screenSections.length}`);
        
        screenDetection.screenSections.forEach((section, index) => {
          analysis.push(`\nüì± PANTALLA ${index + 1}: ${section.title}`);
          analysis.push(`   ${section.description}`);
          
          if (section.texts.length > 0) {
            analysis.push(`   üìù Textos: ${section.texts.slice(0, 5).join(', ')}${section.texts.length > 5 ? '...' : ''}`);
          }
          
          if (section.fields.length > 0) {
            analysis.push(`   üî§ Campos: ${section.fields.join(', ')}`);
          }
          
          if (section.buttons.length > 0) {
            analysis.push(`   üîò Botones: ${section.buttons.join(', ')}`);
          }
          
          if (section.radioGroups.length > 0) {
            section.radioGroups.forEach(group => {
              analysis.push(`   ‚ö™ ${group.title}: ${group.options.map(opt => opt.text).join(', ')}`);
            });
          }
          
          if (section.colors.length > 0) {
            analysis.push(`   üé® Colores: ${section.colors.slice(0, 3).join(', ')}`);
          }
        });
        
        // NAVEGACI√ìN BASADA EN SECCIONES
        if (screenDetection.screenSections.length > 1) {
          analysis.push(`\nüß≠ DRAWER AUTOM√ÅTICO - Rutas:`);
          screenDetection.screenSections.forEach((section, index) => {
            const route = index === 0 ? '/' : `/${section.title.toLowerCase().replace(/screen$/, '').replace(/\s+/g, '-')}`;
            analysis.push(`   - ${route} ‚Üí ${section.title}`);
          });
        }
        
      } else {
        // FALLBACK: AN√ÅLISIS TRADICIONAL
        const phoneMatches = xml.match(/shape=["']mxgraph\.android\.phone2["']/g);
        const phoneCount = phoneMatches ? phoneMatches.length : 0;
        
        if (phoneCount > 1) {
          analysis.push(`üîç M√öLTIPLES PANTALLAS DETECTADAS: ${phoneCount} pantallas ‚Üí CREAR DRAWER`);
        } else if (phoneCount === 1) {
          analysis.push(`üì± PANTALLA √öNICA detectada ‚Üí Sin drawer`);
        }
        
        // Buscar elementos de texto espec√≠ficos
        const textMatches = xml.match(/value="([^"]*)"[^>]*>/g);
        if (textMatches) {
          const texts = textMatches
            .map(match => {
              const result = match.match(/value="([^"]*)"/);
              return result ? result[1] : null;
            })
            .filter((text): text is string => text !== null && text.trim().length > 0 && text !== 'Text' && text !== '')
            .slice(0, 15);
          
          if (texts.length > 0) {
            analysis.push(`TEXTOS DEL MOCKUP: ${texts.join(', ')}`);
            
            // AN√ÅLISIS POR PANTALLA
            const screenTitles: string[] = [];
            const formFields: string[] = [];
            const buttons: string[] = [];
            
            texts.forEach(text => {
              const lowerText = text.toLowerCase();
              
              if (lowerText.includes('register') || lowerText.includes('create a project') || lowerText.includes('dashboard')) {
                screenTitles.push(text);
                analysis.push(`üìã PANTALLA: "${text}"`);
              } else if (lowerText.includes('name') || lowerText.includes('password') || 
                        lowerText.includes('key') || lowerText.includes('description')) {
                formFields.push(text);
                analysis.push(`üìù Campo: ${text}`);
              } else if (lowerText.includes('guardar') || lowerText.includes('publish') || 
                        lowerText.includes('cancel') || lowerText.includes('primary')) {
                buttons.push(text);
                analysis.push(`üîò Bot√≥n: ${text}`);
              }
            });
            
            if (screenTitles.length > 0) {
              analysis.push(`\nüéØ PANTALLAS A GENERAR: ${screenTitles.join(' + ')}`);
            }
          }
        }
        
        // Buscar colores
        const colorMatches = xml.match(/fillColor=([#\w]+)/g);
        if (colorMatches) {
          const colors = [...new Set(colorMatches.map(match => match.split('=')[1]))].slice(0, 3);
          analysis.push(`üé® COLORES: ${colors.join(', ')}`);
        }
        
        // DETECTAR RADIO BUTTONS
        const radioButtonMatches = xml.match(/shape=["']ellipse["'][^>]*strokeColor/g);
        if (radioButtonMatches && radioButtonMatches.length > 0) {
          analysis.push(`üîò Radio buttons detectados: ${radioButtonMatches.length}`);
          
          const radioTexts = xml.match(/Read and write|Read only|None/g);
          if (radioTexts) {
            analysis.push(`üìã Opciones: ${radioTexts.join(', ')}`);
          }
        }

        // NAVEGACI√ìN REQUERIDA
        if (phoneCount > 1) {
          analysis.push(`\nüß≠ DRAWER OBLIGATORIO para ${phoneCount} pantallas`);
        }
      }
      
      return analysis.length > 0 ? analysis.join('\n') : 'No se encontraron elementos espec√≠ficos.';
    } catch (error) {
      this.logger.warn('Error analizando XML:', error);
      return 'Error analizando el mockup.';
    }
  }

  private formatScreenDetection(screenDetection: any): string {
    if (!screenDetection) return '';
    
    const info: string[] = [];
    
    if (screenDetection.shouldCreateDrawer) {
      info.push('üóÇÔ∏è DRAWER AUTOM√ÅTICO ACTIVADO');
    }
    
    // MOSTRAR SECCIONES DETALLADAS SI EST√ÅN DISPONIBLES
    if (screenDetection.screenSections?.length > 0) {
      info.push(`üì± SECCIONES DETECTADAS: ${screenDetection.screenSections.length}`);
      
      screenDetection.screenSections.forEach((section: any, index: number) => {
        info.push(`   ${index + 1}. ${section.title} - ${section.description}`);
        
        if (section.fields?.length > 0) {
          info.push(`      üìù Campos: ${section.fields.join(', ')}`);
        }
        
        if (section.buttons?.length > 0) {
          info.push(`      üîò Botones: ${section.buttons.join(', ')}`);
        }
        
        if (section.radioGroups?.length > 0) {
          section.radioGroups.forEach((group: any) => {
            info.push(`      ‚ö™ ${group.title}: ${group.options.map((opt: any) => opt.text).join(', ')}`);
          });
        }
      });
    } else {
      // FALLBACK: FORMATO TRADICIONAL
      if (screenDetection.detectedScreens?.length > 0) {
        info.push(`üì± Pantallas: ${screenDetection.detectedScreens.join(', ')}`);
      }
      
      if (screenDetection.detectedFields?.length > 0) {
        info.push(`üìù Campos: ${screenDetection.detectedFields.join(', ')}`);
      }
      
      if (screenDetection.detectedButtons?.length > 0) {
        info.push(`üîò Botones: ${screenDetection.detectedButtons.join(', ')}`);
      }
      
      if (screenDetection.detectedRadioGroups?.length > 0) {
        const radioInfo = screenDetection.detectedRadioGroups
          .map((group: any) => `${group.title}: ${group.options.map((opt: any) => opt.text).join(', ')}`)
          .join(' | ');
        info.push(`üîò Radio Groups: ${radioInfo}`);
      }
    }
    
    return info.join('\n');
  }

  private createStructuredInstructions(xml: string, screenDetection?: any): string {
    const instructions: string[] = [];
    
    // Analizar pantallas individualmente
    const phoneMatches = xml.match(/shape=mxgraph\.android\.phone2/g) || [];
    const phoneCount = phoneMatches.length;
    
    instructions.push('üìã INSTRUCCIONES ESPEC√çFICAS DE GENERACI√ìN:');
    
    if (phoneCount > 1) {
      instructions.push(`\nüéØ DETECTADAS ${phoneCount} PANTALLAS - GENERAR TODAS:`);
      
      // Analizar contenido alrededor de cada pantalla
      const phoneElements = this.extractIndividualScreenContent(xml);
      
      phoneElements.forEach((screen, index) => {
        instructions.push(`\nüì± PANTALLA ${index + 1}:`);
        instructions.push(`   [FILE: lib/features/screen${index + 1}/screens/screen${index + 1}_screen.dart]`);
        
        if (screen.texts.length > 0) {
          instructions.push(`   üìù Textos a incluir: ${screen.texts.slice(0, 5).join(', ')}`);
        }
        
        if (screen.fields.length > 0) {
          instructions.push(`   üî≤ Campos de entrada: ${screen.fields.join(', ')}`);
        }
        
        if (screen.buttons.length > 0) {
          instructions.push(`   üîò Botones: ${screen.buttons.join(', ')}`);
        }
        
        if (screen.hasTable) {
          instructions.push(`   üìä Incluir tabla con datos`);
        }
        
        if (screen.hasRadioButtons) {
          instructions.push(`   ‚ö™ Incluir radio buttons`);
        }
        
        // Detectar tipo de pantalla por contenido
        if (screen.texts.some(t => t.includes('Create a project'))) {
          instructions.push(`   üéØ Tipo: Formulario de creaci√≥n de proyecto`);
          instructions.push(`   üöÄ Incluir: AppRadioGroup para permisos`);
        } else if (screen.texts.some(t => t.includes('Dashboard') || t.includes('Dasboard'))) {
          instructions.push(`   üéØ Tipo: Pantalla dashboard principal`);
        } else if (screen.hasTable) {
          instructions.push(`   üéØ Tipo: Pantalla de datos con tabla`);
        } else {
          instructions.push(`   üéØ Tipo: Pantalla con contenido espec√≠fico`);
        }
      });
      
      instructions.push(`\nüóÇÔ∏è NAVIGATION DRAWER OBLIGATORIO:`);
      instructions.push(`   [FILE: lib/shared/widgets/app_drawer.dart]`);
      instructions.push(`   - Incluir navegaci√≥n a las ${phoneCount} pantallas`);
      instructions.push(`   - Usar context.go() y context.push() con GoRouter`);
      
    } else if (phoneCount === 1) {
      instructions.push('\nüéØ PANTALLA √öNICA DETECTADA:');
      instructions.push('   Generar aplicaci√≥n con una pantalla principal');
    }
    
    // Instrucciones para pantallas espec√≠ficas (compatibilidad con c√≥digo existente)
    if (screenDetection?.detectedScreens?.length > 0) {
      instructions.push('\\nüéØ PANTALLAS ADICIONALES DETECTADAS:');
      screenDetection.detectedScreens.forEach((screen: string, index: number) => {
        if (screen.toLowerCase().includes('register')) {
          instructions.push(`   ${index + 1}. RegisterScreen:`);
          instructions.push(`      - T√≠tulo: "${screen}"`);
          instructions.push(`      - Campo: Your name (TextFormField con validaci√≥n)`);
          instructions.push(`      - Campo: Password (TextFormField obscureText: true)`);
          instructions.push(`      - Bot√≥n: Guardar (ElevatedButton)`);
          instructions.push(`      - Import: '../../../shared/widgets/app_drawer.dart'`);
        } else if (screen.toLowerCase().includes('create a project')) {
          instructions.push(`   ${index + 1}. CreateProjectScreen:`);
          instructions.push(`      - T√≠tulo: "${screen}"`);
          instructions.push(`      - Descripci√≥n: "Projects are where your repositories live..."`);
          instructions.push(`      - Campo: Name (TextFormField)`);
          instructions.push(`      - Campo: Key* (TextFormField con asterisco rojo)`);
          instructions.push(`      - Campo: Description (TextFormField multiline)`);
          instructions.push(`      - Secci√≥n: Project permissions`);
          instructions.push(`      - RadioGroup: User access con opciones:`);
          instructions.push(`        * Read and write (seleccionado por defecto)`);
          instructions.push(`        * Read only`);
          instructions.push(`        * None`);
          instructions.push(`      - Bot√≥n: Publish (ElevatedButton)`);
          instructions.push(`      - Bot√≥n: Cancel (TextButton)`);
          instructions.push(`      - Import: '../../../shared/widgets/app_drawer.dart'`);
          instructions.push(`      - Import: '../../../shared/widgets/app_widgets.dart'`);
          instructions.push(`      - AppDrawer DEBE usar: import 'package:go_router/go_router.dart'`);
          instructions.push(`      - Navigation: context.go('/') y context.push('/create-project')`);
          instructions.push(`      - PROHIBIDO: Navigator.pushNamed() en AppDrawer`);
        }
      });
    }
    
    // Instrucciones espec√≠ficas para radio buttons
    if (screenDetection?.detectedRadioGroups?.length > 0) {
      instructions.push('\\nüîò RADIO BUTTONS OBLIGATORIOS:');
      screenDetection.detectedRadioGroups.forEach((group: any) => {
        instructions.push(`   Generar AppRadioGroup para "${group.title}":`);
        instructions.push('   ```dart');
        instructions.push('   String? selectedAccess = "read_write"; // Estado');
        instructions.push('   ');
        instructions.push('   AppRadioGroup<String>(');
        instructions.push(`     title: "${group.title}",`);
        instructions.push('     options: [');
        group.options.forEach((option: any) => {
          const value = option.text.toLowerCase().replace(/\\s+/g, '_');
          instructions.push(`       RadioOption(title: "${option.text}", value: "${value}"),`);
        });
        instructions.push('     ],');
        instructions.push('     groupValue: selectedAccess,');
        instructions.push('     onChanged: (value) => setState(() => selectedAccess = value),');
        instructions.push('   )');
        instructions.push('   ```');
      });
    }
    
    // Instrucciones para textos espec√≠ficos
    const allTexts = screenDetection?.allTexts || [];
    const importantTexts = allTexts.filter((text: string) => 
      text.includes('Projects are where') || 
      text.includes('Project permissions') ||
      text.includes('BETA') ||
      text.length > 20
    );
    
    if (importantTexts.length > 0) {
      instructions.push('\\nüìù TEXTOS ESPEC√çFICOS A INCLUIR:');
      importantTexts.forEach((text: string) => {
        if (text.includes('Projects are where')) {
          instructions.push(`   - Descripci√≥n: "${text.replace(/&#xa;/g, '\\\\n')}"`);
        } else if (text.includes('Project permissions')) {
          instructions.push(`   - Secci√≥n t√≠tulo: "${text}"`);
        } else if (text === 'BETA') {
          instructions.push('   - Badge: "BETA" (Container con color azul)');
        }
      });
    }
    
    // Instrucciones para colores
    const colors = this.extractColorsFromXml(xml);
    if (colors.length > 0) {
      instructions.push('\\nüé® COLORES DEL MOCKUP:');
      instructions.push(`   Usar en AppTheme: ${colors.join(', ')}`);
    }
    
    return instructions.join('\\n');
  }

  /**
   * Extrae contenido espec√≠fico de cada pantalla individual
   */
  private extractIndividualScreenContent(xml: string): Array<{
    texts: string[];
    fields: string[];
    buttons: string[];
    hasTable: boolean;
    hasRadioButtons: boolean;
  }> {
    const screens: Array<{
      texts: string[];
      fields: string[];
      buttons: string[];
      hasTable: boolean;
      hasRadioButtons: boolean;
    }> = [];
    
    // Dividir el XML por grupos de elementos cerca de cada tel√©fono
    const phonePattern = /verticalLabelPosition=bottom.*?shape=mxgraph\.android\.phone2/g;
    const phoneMatches = [...xml.matchAll(phonePattern)];
    
    phoneMatches.forEach((match, index) => {
      const startPos = match.index || 0;
      const endPos = phoneMatches[index + 1]?.index || xml.length;
      const screenXml = xml.substring(startPos, endPos);
      
      // Extraer contenido espec√≠fico de esta pantalla
      const texts = this.extractTextsFromSection(screenXml);
      const fields = this.extractFieldsFromSection(screenXml);  
      const buttons = this.extractButtonsFromSection(screenXml);
      const hasTable = screenXml.includes('shape=table');
      const hasRadioButtons = screenXml.includes('shape=ellipse');
      
      screens.push({
        texts,
        fields,
        buttons,
        hasTable,
        hasRadioButtons
      });
    });
    
    return screens;
  }

  private extractTextsFromSection(section: string): string[] {
    const texts: string[] = [];
    const textMatches = section.match(/value="([^"]+)"/g) || [];
    textMatches.forEach(match => {
      const text = match.replace('value="', '').replace('"', '');
      if (text.length > 1 && !text.includes('mxgraph')) {
        texts.push(text);
      }
    });
    return texts;
  }

  private extractFieldsFromSection(section: string): string[] {
    const fields: string[] = [];
    const fieldMatches = section.match(/name="([^"]+)"/g) || [];
    fieldMatches.forEach(match => {
      const field = match.replace('name="', '').replace('"', '');
      if (field.length > 1 && !field.includes('mxgraph')) {
        fields.push(field);
      }
    });
    return fields;
  }

  private extractButtonsFromSection(section: string): string[] {
    const buttons: string[] = [];
    const buttonMatches = section.match(/shape=["']ellipse["'][^>]*strokeColor/g) || [];
    buttonMatches.forEach(match => {
      const button = match.replace('shape="', '').replace('"', '');
      if (button.length > 1 && !button.includes('mxgraph')) {
        buttons.push(button);
      }
    });
    return buttons;
  }

  private extractColorsFromXml(xml: string): string[] {
    const colorMatches = xml.match(/#[0-9A-Fa-f]{6}/g);
    if (colorMatches) {
      return [...new Set(colorMatches)].slice(0, 3);
    }
    return [];
  }

  /**
   * Analiza el dominio espec√≠fico de la aplicaci√≥n desde el prompt enriquecido
   */
  private analyzePromptDomain(prompt: string): string {
    const lowerPrompt = prompt.toLowerCase();
    const domains = [
      { keywords: ['gimnasio', 'fitness', 'entrenamiento', 'ejercicio', 'rutina'], name: 'FITNESS & GYM', icon: 'üí™' },
      { keywords: ['delivery', 'comida', 'restaurante', 'pedido', 'entrega'], name: 'FOOD DELIVERY', icon: 'üçî' },
      { keywords: ['contable', 'financiero', 'dinero', 'transaccion', 'factura'], name: 'FINANZAS', icon: 'üí∞' },
      { keywords: ['educativo', 'escolar', 'estudiante', 'curso', 'aprendizaje'], name: 'EDUCACI√ìN', icon: 'üìö' },
      { keywords: ['medico', 'salud', 'hospital', 'cita', 'paciente'], name: 'SALUD', icon: 'üè•' },
      { keywords: ['tienda', 'ecommerce', 'producto', 'venta', 'carrito'], name: 'E-COMMERCE', icon: 'üõí' },
      { keywords: ['social', 'chat', 'mensaje', 'amigo', 'red'], name: 'SOCIAL', icon: 'üë•' }
    ];

    for (const domain of domains) {
      if (domain.keywords.some(keyword => lowerPrompt.includes(keyword))) {
        return `${domain.icon} DOMINIO DETECTADO: ${domain.name}`;
      }
    }
    return 'üîß DOMINIO: APLICACI√ìN GENERAL';
  }

  /**
   * Extrae EXACTAMENTE las funcionalidades solicitadas por el usuario
   */
  private extractRequestedFeatures(prompt: string): string {
    const lowerPrompt = prompt.toLowerCase();
    const features: string[] = [];
    
    // Detectar funcionalidades espec√≠ficas mencionadas
    if (lowerPrompt.includes('login') || lowerPrompt.includes('iniciar sesion') || lowerPrompt.includes('autenticacion')) {
      features.push('üîê Funcionalidad de Login/Autenticaci√≥n');
    }
    
    if (lowerPrompt.includes('register') || lowerPrompt.includes('registro') || lowerPrompt.includes('crear cuenta')) {
      features.push('üìù Funcionalidad de Registro de usuarios');
    }
    
    if (lowerPrompt.includes('home') || lowerPrompt.includes('dashboard') || lowerPrompt.includes('panel') || lowerPrompt.includes('inicio')) {
      features.push('üè† Pantalla principal/Home con datos espec√≠ficos');
    }
    
    if (lowerPrompt.includes('perfil') || lowerPrompt.includes('profile') || lowerPrompt.includes('cuenta')) {
      features.push('üë§ Gesti√≥n de perfil de usuario');
    }
    
    if (lowerPrompt.includes('configuracion') || lowerPrompt.includes('settings') || lowerPrompt.includes('ajustes')) {
      features.push('‚öôÔ∏è Configuraciones de la aplicaci√≥n');
    }
    
    // Detectar funcionalidades espec√≠ficas de gym/fitness
    if (lowerPrompt.includes('gym') || lowerPrompt.includes('gimnasio') || lowerPrompt.includes('fitness')) {
      features.push('üí™ Aplicaci√≥n espec√≠fica de GYM/FITNESS');
      
      if (lowerPrompt.includes('rutina') || lowerPrompt.includes('ejercicio') || lowerPrompt.includes('workout')) {
        features.push('üèãÔ∏è Gesti√≥n de rutinas de ejercicio');
      }
      if (lowerPrompt.includes('progreso') || lowerPrompt.includes('estadistica') || lowerPrompt.includes('progress')) {
        features.push('üìä Seguimiento de progreso y estad√≠sticas');
      }
      if (lowerPrompt.includes('muscle') || lowerPrompt.includes('musculo') || lowerPrompt.includes('peso')) {
        features.push('üí™ Registro de pesos y grupos musculares');
      }
    }
    
    // Si no se detectan funcionalidades espec√≠ficas, usar el prompt completo
    if (features.length === 0) {
      features.push(`üéØ Funcionalidad solicitada: ${prompt.substring(0, 100)}...`);
    }
    
    return features.join('\n');
  }

  /**
   * Extrae EXACTAMENTE las pantallas solicitadas por el usuario
   */
  private extractExactScreensRequested(prompt: string): string[] {
    const screens: string[] = [];
    
    // NUEVO: Buscar p√°ginas en formato estructurado del prompt enriquecido
    const structuredPagesMatch = prompt.match(/P√ÅGINAS PRINCIPALES OBLIGATORIAS[^:]*:([\s\S]*?)(?=FUNCIONALIDADES|PANTALLAS M√çNIMAS|$)/i);
    
    if (structuredPagesMatch) {
      const pageLines = structuredPagesMatch[1]
        .split('\n')
        .map(line => line.trim())
        .filter(line => line.match(/^\d+\.\s*\w+Screen:/));
      
      if (pageLines.length > 0) {
        this.logger.debug(`üéØ P√°ginas estructuradas encontradas: ${pageLines.length}`);
        pageLines.forEach(line => {
          // Extraer el nombre de la pantalla y descripci√≥n
          const match = line.match(/^\d+\.\s*(\w+Screen):\s*(.+)$/);
          if (match) {
            const screenName = match[1];
            const description = match[2];
            screens.push(`üì± ${screenName} - ${description}`);
            this.logger.debug(`   ‚Ä¢ ${screenName}: ${description}`);
          }
        });
        
        // Si encontramos p√°ginas estructuradas, retornar esas SOLAMENTE
        if (screens.length > 0) {
          this.logger.debug(`‚úÖ Usando ${screens.length} p√°ginas del prompt enriquecido`);
          return screens;
        }
      }
    }
    
    // FALLBACK: Detecci√≥n b√°sica si no hay p√°ginas estructuradas
    this.logger.debug('üîÑ Usando detecci√≥n b√°sica de p√°ginas (fallback)');
    const lowerPrompt = prompt.toLowerCase();
    
    // Detectar pantallas espec√≠ficas mencionadas
    if (lowerPrompt.includes('login') || lowerPrompt.includes('iniciar sesion')) {
      screens.push('üì± LoginScreen - Pantalla de inicio de sesi√≥n');
    }
    
    if (lowerPrompt.includes('register') || lowerPrompt.includes('registro')) {
      screens.push('üì± RegisterScreen - Pantalla de registro');
    }
    
    // Detectar variantes de pantalla principal/home
    if (lowerPrompt.includes('home') || lowerPrompt.includes('inicio') || 
        lowerPrompt.includes('dashboard') || lowerPrompt.includes('panel') ||
        lowerPrompt.includes('principal')) {
      screens.push('üì± HomeScreen - Pantalla principal');
    }
    
    if (lowerPrompt.includes('perfil') || lowerPrompt.includes('profile')) {
      screens.push('üì± ProfileScreen - Pantalla de perfil');
    }
    
    if (lowerPrompt.includes('configuracion') || lowerPrompt.includes('settings') || lowerPrompt.includes('ajustes')) {
      screens.push('üì± SettingsScreen - Pantalla de configuraciones');
    }
    
    // Detectar pantallas espec√≠ficas de gym/fitness
    if (lowerPrompt.includes('gym') || lowerPrompt.includes('gimnasio') || lowerPrompt.includes('fitness')) {
      if (lowerPrompt.includes('rutina') || lowerPrompt.includes('ejercicio') || lowerPrompt.includes('workout')) {
        screens.push('üì± WorkoutScreen - Pantalla de rutinas de ejercicio');
      }
      if (lowerPrompt.includes('progreso') || lowerPrompt.includes('estadistica') || lowerPrompt.includes('progress')) {
        screens.push('üì± ProgressScreen - Pantalla de progreso y estad√≠sticas');
      }
    }
    
    // Si no se detectan pantallas espec√≠ficas, usar pantallas b√°sicas
    if (screens.length === 0) {
      screens.push('üì± HomeScreen - Pantalla principal');
      this.logger.debug('üîÑ Usando pantalla b√°sica como fallback');
    }
    
    return screens;
  }

  /**
   * Detecta el contexto espec√≠fico del dominio para proporcionar datos relevantes
   */
  private detectDomainContext(prompt: string): string {
    const lowerPrompt = prompt.toLowerCase();
    
    if (lowerPrompt.includes('gym') || lowerPrompt.includes('gimnasio') || lowerPrompt.includes('fitness')) {
      return `üí™ APLICACI√ìN DE GYM/FITNESS DETECTADA:
- HomeScreen debe mostrar: rutinas del d√≠a, progreso reciente, pr√≥ximos entrenamientos
- Datos espec√≠ficos: ejercicios, series, repeticiones, pesos, m√∫sculos trabajados
- UI espec√≠fica: gr√°ficos de progreso, calendarios de entrenamientos, listas de ejercicios
- Colores sugeridos: azules/verdes para fitness, rojos para esfuerzo, grises para descanso
- Iconos espec√≠ficos: fitness_center, timeline, insights, schedule, person`;
    }
    
    if (lowerPrompt.includes('delivery') || lowerPrompt.includes('comida') || lowerPrompt.includes('restaurante')) {
      return `üçî APLICACI√ìN DE DELIVERY DETECTADA:
- HomeScreen debe mostrar: restaurantes cercanos, pedidos recientes, ofertas especiales
- Datos espec√≠ficos: men√∫s, precios, tiempos de entrega, calificaciones
- UI espec√≠fica: cards de restaurantes, carrito de compras, mapa de ubicaciones
- Colores sugeridos: rojos/naranjas para comida, verdes para disponible`;
    }
    
    if (lowerPrompt.includes('finanza') || lowerPrompt.includes('banco') || lowerPrompt.includes('dinero')) {
      return `üí∞ APLICACI√ìN FINANCIERA DETECTADA:
- HomeScreen debe mostrar: balance actual, transacciones recientes, gastos del mes
- Datos espec√≠ficos: montos, categor√≠as, fechas, gr√°ficos de gastos
- UI espec√≠fica: cards de balance, listas de transacciones, gr√°ficos circulares
- Colores sugeridos: azules para confianza, verdes para ingresos, rojos para gastos`;
    }
    
    return 'üîß APLICACI√ìN GENERAL: HomeScreen con datos b√°sicos apropiados para la funcionalidad solicitada';
  }
} 