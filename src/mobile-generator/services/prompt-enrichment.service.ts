import { Injectable, Logger } from '@nestjs/common';
import { ChatgptService } from '../../chatgpt/chatgpt.service';

@Injectable()
export class PromptEnrichmentService {
  private readonly logger = new Logger(PromptEnrichmentService.name);

  constructor(private readonly chatgptService: ChatgptService) {}

  /**
   * Enriquece un prompt b√°sico usando IA para interpretar y generar p√°ginas espec√≠ficas
   * @param originalPrompt Prompt original del usuario
   * @returns Prompt enriquecido con p√°ginas y funcionalidades espec√≠ficas interpretadas por IA
   */
  async enrichPrompt(originalPrompt: string): Promise<string> {
    this.logger.debug(`üîç Interpretando prompt: "${originalPrompt.substring(0, 50)}..."`);
    
    // SIEMPRE usar IA para interpretaci√≥n din√°mica (no detectar dominios hardcodeados)
    if (process.env.OPENAI_API_KEY) {
      try {
        this.logger.debug(`ü§ñ Enviando prompt a IA para interpretaci√≥n completa`);
        const aiInterpretedPrompt = await this.sendToAIForInterpretation(originalPrompt);
        this.logger.debug(`‚úÖ IA interpret√≥ y enriqueci√≥ el prompt exitosamente`);
        return aiInterpretedPrompt;
      } catch (error) {
        this.logger.error(`‚ùå Error en interpretaci√≥n de IA: ${error.message}`);
        this.logger.warn(`‚ö†Ô∏è Fallback a interpretaci√≥n b√°sica`);
      }
    } else {
      this.logger.warn(`‚ö†Ô∏è Sin API key de OpenAI - usando interpretaci√≥n b√°sica`);
    }
    
    // Fallback final: interpretaci√≥n b√°sica sin categorizaci√≥n
    return this.generateBasicInterpretation(originalPrompt);
  }

  /**
   * Genera interpretaci√≥n b√°sica sin categorizaci√≥n hardcodeada
   */
  private generateBasicInterpretation(originalPrompt: string): string {
    return `
ESPECIFICACI√ìN T√âCNICA B√ÅSICA PARA o3:

üéØ **AN√ÅLISIS DE LA APLICACI√ìN SOLICITADA**
${originalPrompt}

üì± **P√ÅGINAS PRINCIPALES:**
Bas√°ndose en el prop√≥sito de la aplicaci√≥n, se generar√°n las pantallas necesarias para cumplir con la funcionalidad solicitada.

üèóÔ∏è **ARQUITECTURA FLUTTER ESPEC√çFICA**
- Flutter con Material Design 3
- GoRouter para navegaci√≥n
- StatefulWidget con setState() para manejo de estado
- Estructura modular y componentes reutilizables

üé® **DISE√ëO UI**
- Material Design 3 con useMaterial3: true
- Dise√±o responsive y intuitivo
- Navegaci√≥n apropiada seg√∫n el n√∫mero de pantallas

üîÑ **FUNCIONALIDADES**
Las funcionalidades espec√≠ficas se determinar√°n bas√°ndose en el prop√≥sito de la aplicaci√≥n solicitada por el usuario.

NOTA: Esta es una especificaci√≥n b√°sica. Para obtener especificaciones m√°s detalladas, se recomienda usar el an√°lisis de IA.
    `;
  }

  /**
   * Env√≠a el prompt a la IA con reglas claras para interpretaci√≥n completa y detallada
   */
  private async sendToAIForInterpretation(originalPrompt: string): Promise<string> {
    const interpretationPrompt = `
SISTEMA EXPERTO EN ARQUITECTURA DE APLICACIONES M√ìVILES FLUTTER

MISI√ìN: Interpretar "${originalPrompt}" y generar una ESPECIFICACI√ìN T√âCNICA ULTRA-DETALLADA que o3 pueda convertir directamente en c√≥digo Flutter funcional.

ENTRADA DEL USUARIO:
"${originalPrompt}"

REGLAS OBLIGATORIAS PARA LA ESPECIFICACI√ìN:

1. üéØ AN√ÅLISIS COMPLETO DE LA APLICACI√ìN:
   - Analizar EXACTAMENTE qu√© quiere el usuario
   - Interpretar el prop√≥sito espec√≠fico y funcionalidades requeridas
   - Definir el p√∫blico objetivo y casos de uso principales

2. üì± P√ÅGINAS ESPEC√çFICAS DETALLADAS:
   Para cada p√°gina que identifiques como necesaria, especificar:
   - Nombre exacto de la clase (ej: [Nombre]Screen basado en la funcionalidad)
   - Prop√≥sito espec√≠fico y funcionalidad principal
   - Componentes UI espec√≠ficos (AppBar, Body, FAB, BottomNav, etc.)
   - Estados que maneja (loading, error, success, empty)
   - Formularios con campos espec√≠ficos y validaciones
   - Acciones de usuario (tap, scroll, submit, etc.)
   - Navegaci√≥n hacia otras pantallas

3. üèóÔ∏è ARQUITECTURA T√âCNICA ESPEC√çFICA:
   - Estructura de directorios exacta
   - Nombres de archivos espec√≠ficos
   - Imports y dependencias necesarias
   - Modelos de datos con propiedades exactas
   - Servicios y controladores necesarios

4. üé® DISE√ëO UI ESPEC√çFICO:
   - Widgets espec√≠ficos para cada pantalla
   - Layout detallado (Column, Row, ListView, etc.)
   - Colores, iconos y tipograf√≠a espec√≠fica
   - Responsive design considerations
   - Material Design 3 components espec√≠ficos

5. üîÑ FLUJO DE NAVEGACI√ìN DETALLADO:
   - GoRouter routes espec√≠ficas con paths exactos
   - Transiciones entre pantallas
   - Bottom navigation o drawer espec√≠fico seg√∫n sea necesario
   - Deep linking structure

6. üíæ GESTI√ìN DE DATOS ESPEC√çFICA:
   - Modelos de datos exactos con tipos
   - M√©todos CRUD espec√≠ficos
   - Estados locales con StatefulWidget
   - Validaci√≥n de formularios espec√≠fica

GENERA UNA ESPECIFICACI√ìN T√âCNICA COMPLETA Y DETALLADA que contenga:

ESPECIFICACI√ìN T√âCNICA DETALLADA PARA o3:

üéØ **AN√ÅLISIS DE LA APLICACI√ìN SOLICITADA**
${originalPrompt}

üì± **P√ÅGINAS PRINCIPALES OBLIGATORIAS:**
[Determinar seg√∫n an√°lisis - m√≠nimo las necesarias para cumplir el prop√≥sito]

1. [NombreScreen]: [Prop√≥sito espec√≠fico y funcionalidad detallada]
   - UI COMPONENTS: [widgets espec√≠ficos]
   - FORMULARIOS: [campos y validaciones exactas si aplica]
   - ACCIONES: [funciones espec√≠ficas del usuario]
   - NAVEGACI√ìN: [hacia qu√© pantallas conecta]

[Continuar para cada p√°gina necesaria con M√ÅXIMO DETALLE]

üèóÔ∏è **ARQUITECTURA FLUTTER ESPEC√çFICA**
- ESTRUCTURA DE DIRECTORIOS: [exacta seg√∫n funcionalidad]
- ARCHIVOS NECESARIOS: [lista completa]
- MODELOS DE DATOS: [con propiedades espec√≠ficas seg√∫n los datos requeridos]
- SERVICIOS: [m√©todos espec√≠ficos para la funcionalidad]

üé® **DISE√ëO UI DETALLADO**
- LAYOUT ESPEC√çFICO: [widgets y estructura seg√∫n funcionalidad]
- NAVEGACI√ìN: [BottomNav/Drawer seg√∫n n√∫mero de pantallas]
- COLORES Y TEMA: [Material Design 3 apropiado para el prop√≥sito]

üîÑ **FLUJO DE NAVEGACI√ìN COMPLETO**
- ROUTES: [paths espec√≠ficos con GoRouter seg√∫n pantallas identificadas]
- TRANSICIONES: [entre pantallas espec√≠ficas]

IMPORTANTE: 
- Analiza el prop√≥sito espec√≠fico del usuario y genera p√°ginas relevantes
- No uses t√©rminos gen√©ricos sino nombres espec√≠ficos relacionados a la funcionalidad
- Especifica TODOS los campos de formularios, botones, y funcionalidades necesarias
- Da suficiente detalle para que o3 pueda generar c√≥digo Flutter completo y funcional
- Base todo en lo que el usuario realmente necesita, no en categor√≠as predefinidas
    `;

    try {
      const messages = [
        { role: 'system', content: 'Eres un arquitecto de software senior especializado en Flutter que analiza requerimientos de usuario y genera especificaciones t√©cnicas ultra-detalladas personalizadas para cada necesidad espec√≠fica.' },
        { role: 'user', content: interpretationPrompt }
      ];
      
      // Usar GPT-4o para interpretaci√≥n detallada
      const response = await this.chatgptService.chat(messages, 'gpt-4o', 0.2);
      return response;
    } catch (error) {
      this.logger.error('Error llamando a IA para interpretaci√≥n:', error);
      throw error;
    }
  }

  /**
   * Genera prompt con reglas b√°sicas como fallback
   */
  private generatePromptWithBasicRules(originalPrompt: string): string {
    return `
${originalPrompt}

ESPECIFICACI√ìN T√âCNICA AUTOM√ÅTICA:

P√ÅGINAS PRINCIPALES (m√≠nimo 4):
1. HomeScreen: Pantalla principal con funcionalidades principales
2. ListScreen: Lista de elementos principales de la aplicaci√≥n  
3. DetailScreen: Vista detallada de elementos individuales
4. FormScreen: Formulario para crear/editar elementos
5. ProfileScreen: Perfil de usuario
6. SettingsScreen: Configuraciones de la aplicaci√≥n

FUNCIONALIDADES BASE:
- Sistema de autenticaci√≥n (login/registro)
- CRUD completo de elementos principales
- Navegaci√≥n fluida entre pantallas
- Formularios con validaci√≥n
- Estados de carga y error
- B√∫squeda y filtros
- Persistencia de datos

ESPECIFICACIONES T√âCNICAS:
- Flutter con Material Design 3
- GoRouter para navegaci√≥n
- Provider o Riverpod para manejo de estado
- Validaci√≥n de formularios reactiva
- Dise√±o responsive
- Componentes reutilizables

TOTAL DE PANTALLAS: 6 principales + pantallas de autenticaci√≥n
    `;
  }
} 