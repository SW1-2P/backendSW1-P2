import { Injectable, Logger } from '@nestjs/common';
import { ChatgptService } from '../../chatgpt/chatgpt.service';

interface DomainTemplate {
  name: string;
  requiredPages: string[];
  specificFunctionalities: string[];
  keywords: string[];
}

@Injectable()
export class PromptEnrichmentService {
  private readonly logger = new Logger(PromptEnrichmentService.name);

  constructor(private readonly chatgptService: ChatgptService) {}

  /**
   * Enriquece un prompt b√°sico identificando autom√°ticamente el dominio y generando p√°ginas espec√≠ficas
   * @param originalPrompt Prompt original del usuario
   * @returns Prompt enriquecido con p√°ginas y funcionalidades espec√≠ficas del dominio
   */
  async enrichPrompt(originalPrompt: string): Promise<string> {
    try {
      this.logger.debug(`ü§ñ Enriqueciendo prompt con p√°ginas espec√≠ficas: "${originalPrompt.substring(0, 50)}..."`);
      this.logger.debug(`üìè Longitud del prompt original: ${originalPrompt.length} caracteres`);
      
      // 1. Detectar dominio autom√°ticamente
      const detectedDomain = this.detectDomainAdvanced(originalPrompt);
      this.logger.debug(`üîç Dominio detectado: ${detectedDomain.name}`);
      
      // 2. Generar p√°ginas espec√≠ficas del dominio
      const enrichedPrompt = this.generateDomainSpecificPrompt(originalPrompt, detectedDomain);
      
      this.logger.debug(`üìè Prompt enriquecido: ${enrichedPrompt.length} caracteres`);
      this.logger.debug(`‚úÖ Prompt enriquecido con ${detectedDomain.requiredPages.length} p√°ginas espec√≠ficas`);
      
      return enrichedPrompt;
      
    } catch (error) {
      this.logger.error(`‚ùå Error enriqueciendo prompt: ${error.message}`);
      // Fallback: usar plantilla gen√©rica
      this.logger.debug(`üîÑ Usando plantilla gen√©rica como fallback`);
      return this.generateGenericEnrichedPrompt(originalPrompt);
    }
  }

  /**
   * Genera un prompt enriquecido espec√≠fico para el dominio detectado
   */
  private generateDomainSpecificPrompt(originalPrompt: string, domain: DomainTemplate): string {
    const pagesDescription = domain.requiredPages.map((page, index) => 
      `${index + 1}. ${page}`
    ).join('\n');

    const functionalitiesDescription = domain.specificFunctionalities.map((func, index) => 
      `- ${func}`
    ).join('\n');

    return `${originalPrompt}

APLICACI√ìN DEL DOMINIO: ${domain.name.toUpperCase()}

P√ÅGINAS PRINCIPALES OBLIGATORIAS (m√≠nimo ${domain.requiredPages.length}):
${pagesDescription}

FUNCIONALIDADES ESPEC√çFICAS DEL DOMINIO:
${functionalitiesDescription}

FUNCIONALIDADES BASE (toda app m√≥vil moderna):
- Sistema de autenticaci√≥n completo (LoginScreen, RegisterScreen)
- Dashboard principal con navegaci√≥n intuitiva
- Perfil de usuario editable (ProfileScreen)
- Configuraciones de la aplicaci√≥n (SettingsScreen)
- Estados de carga, error y √©xito en toda la app
- Validaciones de formularios con mensajes claros
- Navegaci√≥n con bottom navigation o drawer
- Dise√±o Material Design 3 responsive

ESPECIFICACIONES T√âCNICAS:
- Usar Flutter con GoRouter para navegaci√≥n
- Material Design 3 con useMaterial3: true
- Implementar TODAS las pantallas listadas arriba
- Formularios con validaci√≥n reactiva
- Navegaci√≥n fluida entre todas las pantallas
- Componentes reutilizables y c√≥digo limpio
- Manejo de estados con Provider o Riverpod

PANTALLAS M√çNIMAS TOTALES: ${domain.requiredPages.length + 4} (${domain.requiredPages.length} espec√≠ficas + 4 base)`;
  }

  /**
   * Detecta el dominio de aplicaci√≥n con plantillas espec√≠ficas
   */
  private detectDomainAdvanced(prompt: string): DomainTemplate {
    const lowerPrompt = prompt.toLowerCase();
    
    const domainTemplates: DomainTemplate[] = [
      // GYM/FITNESS
      {
        name: 'fitness_gym',
        keywords: ['gym', 'gimnasio', 'fitness', 'ejercicio', 'entrenamiento', 'rutina', 'musculo'],
        requiredPages: [
          'HomeScreen: Dashboard con resumen de entrenamientos y progreso del d√≠a',
          'WorkoutScreen: Lista de rutinas disponibles con categor√≠as (pecho, piernas, etc.)',
          'ExerciseDetailScreen: Detalles de ejercicios con instrucciones y videos',
          'ProgressScreen: Gr√°ficos de progreso, peso levantado y estad√≠sticas',
          'TrainingHistoryScreen: Historial de entrenamientos completados'
        ],
        specificFunctionalities: [
          'Sistema de rutinas de ejercicio por grupos musculares',
          'Seguimiento de progreso con gr√°ficos de peso y repeticiones',
          'Cron√≥metro para descansos entre series',
          'Calendario de entrenamientos',
          'Calculadora de IMC y m√©tricas corporales',
          'Biblioteca de ejercicios con instrucciones',
          'Sistema de logros y objetivos',
          'Recordatorios de entrenamiento'
        ]
      },
      
      // FINANZAS/CONTABLE
      {
        name: 'finanzas_contable',
        keywords: ['contable', 'financiero', 'banco', 'dinero', 'transaccion', 'presupuesto', 'gasto'],
        requiredPages: [
          'HomeScreen: Dashboard financiero con balance actual y gastos del mes',
          'TransactionsScreen: Lista de todas las transacciones con filtros',
          'AddTransactionScreen: Formulario para agregar ingresos/gastos',
          'ReportsScreen: Reportes financieros con gr√°ficos y estad√≠sticas',
          'CategoriesScreen: Gesti√≥n de categor√≠as de gastos e ingresos'
        ],
        specificFunctionalities: [
          'Registro de ingresos y gastos por categor√≠as',
          'Dashboard con gr√°ficos de flujo de dinero',
          'Reportes de balance mensual y anual',
          'Categorizaci√≥n autom√°tica de movimientos',
          'Presupuestos por categor√≠a con alertas',
          'Exportaci√≥n de reportes a PDF/Excel',
          'An√°lisis de tendencias de gasto',
          'Recordatorios de pagos recurrentes'
        ]
      },
      
      // E-COMMERCE/TIENDA
      {
        name: 'ecommerce_tienda',
        keywords: ['tienda', 'venta', 'producto', 'carrito', 'compra', 'ecommerce', 'catalogo'],
        requiredPages: [
          'HomeScreen: Cat√°logo de productos destacados con b√∫squeda',
          'ProductListScreen: Lista de productos con filtros y categor√≠as',
          'ProductDetailScreen: Detalles del producto con galer√≠a e informaci√≥n',
          'CartScreen: Carrito de compras con resumen y checkout',
          'OrdersScreen: Historial de pedidos y seguimiento'
        ],
        specificFunctionalities: [
          'Cat√°logo de productos con b√∫squeda avanzada',
          'Carrito de compras persistente',
          'Sistema de favoritos/wishlist',
          'M√∫ltiples m√©todos de pago',
          'Seguimiento de pedidos en tiempo real',
          'Sistema de reviews y ratings',
          'Notificaciones de ofertas y stock',
          'Gesti√≥n de direcciones de env√≠o'
        ]
      },
      
      // DELIVERY/COMIDA
      {
        name: 'delivery_comida',
        keywords: ['delivery', 'entrega', 'pedido', 'restaurante', 'comida', 'domicilio'],
        requiredPages: [
          'HomeScreen: Lista de restaurantes cercanos con b√∫squeda',
          'RestaurantDetailScreen: Men√∫ del restaurante con categor√≠as',
          'CartScreen: Carrito con productos seleccionados y total',
          'OrderTrackingScreen: Seguimiento del pedido en tiempo real',
          'OrderHistoryScreen: Historial de pedidos anteriores'
        ],
        specificFunctionalities: [
          'B√∫squeda de restaurantes por ubicaci√≥n',
          'Men√∫s categorizados con im√°genes',
          'Carrito con personalizaci√≥n de productos',
          'Tracking en tiempo real del delivery',
          'M√∫ltiples m√©todos de pago',
          'Sistema de ratings para restaurantes',
          'Estimaci√≥n de tiempo de entrega',
          'Notificaciones push del estado del pedido'
        ]
      },
      
      // SALUD/M√âDICO
      {
        name: 'salud_medico',
        keywords: ['medico', 'hospital', 'paciente', 'cita', 'salud', 'clinica', 'doctor'],
        requiredPages: [
          'HomeScreen: Dashboard de salud con pr√≥ximas citas y recordatorios',
          'DoctorsScreen: Lista de m√©dicos disponibles con especialidades',
          'AppointmentScreen: Agendar nueva cita m√©dica',
          'MedicalHistoryScreen: Historial m√©dico y expediente',
          'PrescriptionsScreen: Recetas m√©dicas y medicamentos'
        ],
        specificFunctionalities: [
          'Sistema de agendamiento de citas',
          'Historial m√©dico digital',
          'Gesti√≥n de recetas y medicamentos',
          'Recordatorios de citas y medicinas',
          'Directorio de m√©dicos por especialidad',
          'Telemedicina b√°sica',
          'Alertas de ex√°menes m√©dicos',
          'Compartir informaci√≥n con familiares'
        ]
      },
      
      // EDUCACI√ìN/ESCOLAR
      {
        name: 'educacion_escolar',
        keywords: ['escolar', 'estudiante', 'profesor', 'curso', 'educativo', 'educativa', 'aprendizaje', 'clase'],
        requiredPages: [
          'HomeScreen: Dashboard estudiantil con pr√≥ximas clases y tareas',
          'CoursesScreen: Lista de materias/cursos inscritos',
          'AssignmentsScreen: Tareas pendientes y completadas',
          'GradesScreen: Calificaciones por materia y promedio',
          'ScheduleScreen: Horario de clases semanal'
        ],
        specificFunctionalities: [
          'Gesti√≥n de materias y horarios',
          'Sistema de tareas y entregables',
          'Calificaciones y reportes acad√©micos',
          'Calendario acad√©mico',
          'Comunicaci√≥n con profesores',
          'Biblioteca de recursos educativos',
          'Recordatorios de clases y ex√°menes',
          'Progreso acad√©mico por materia'
        ]
      },
      
      // SOCIAL/CHAT
      {
        name: 'social_chat',
        keywords: ['chat', 'mensaje', 'amigo', 'red social', 'post', 'comentario', 'social'],
        requiredPages: [
          'HomeScreen: Feed de publicaciones de amigos',
          'ChatsScreen: Lista de conversaciones activas',
          'ChatDetailScreen: Conversaci√≥n individual con mensajer√≠a',
          'ProfileScreen: Perfil p√∫blico con posts y seguidores',
          'CreatePostScreen: Crear nueva publicaci√≥n con media'
        ],
        specificFunctionalities: [
          'Sistema de mensajer√≠a en tiempo real',
          'Feed de publicaciones con likes y comentarios',
          'Sistema de amigos/seguidores',
          'Compartir fotos y videos',
          'Notificaciones de actividad social',
          'Estados/stories temporales',
          'Grupos y comunidades',
          'Chat grupal'
        ]
      }
    ];

    // Buscar coincidencias por keywords
    for (const template of domainTemplates) {
      if (template.keywords.some(keyword => lowerPrompt.includes(keyword))) {
        this.logger.debug(`üéØ Dominio espec√≠fico detectado: ${template.name}`);
        return template;
      }
    }

    // Fallback: plantilla gen√©rica
    this.logger.debug(`üîÑ Usando plantilla gen√©rica`);
    return this.getGenericTemplate();
  }

  /**
   * Plantilla gen√©rica para aplicaciones que no coinciden con dominios espec√≠ficos
   */
  private getGenericTemplate(): DomainTemplate {
    return {
      name: 'aplicacion_generica',
      keywords: [],
      requiredPages: [
        'HomeScreen: Pantalla principal con funcionalidades principales',
        'ListScreen: Lista de elementos principales de la aplicaci√≥n',
        'DetailScreen: Vista detallada de elementos individuales',
        'CreateEditScreen: Formulario para crear/editar elementos',
        'SearchScreen: B√∫squeda y filtros avanzados'
      ],
      specificFunctionalities: [
        'CRUD completo de elementos principales',
        'Sistema de b√∫squeda y filtros',
        'Gesti√≥n de datos locales y remotos',
        'Interfaz intuitiva y responsive',
        'Validaciones de formularios',
        'Estados de carga y error',
        'Navegaci√≥n fluida entre pantallas',
        'Persistencia de datos local'
      ]
    };
  }

  /**
   * Genera prompt gen√©rico como fallback
   */
  private generateGenericEnrichedPrompt(originalPrompt: string): string {
    const genericTemplate = this.getGenericTemplate();
    return this.generateDomainSpecificPrompt(originalPrompt, genericTemplate);
  }
} 